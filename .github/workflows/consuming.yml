---
name: Consuming Projects

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]

jobs:
  e2e:
    name: E2E
      #timeout-minutes: 50
    runs-on: ubuntu-latest
    if: |
      ( github.event.action == 'labeled' && github.event.label.name == 'e2e-projects' )
      || ( github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'e2e-projects') )
    strategy:
      fail-fast: false
      matrix:
        project: ['submariner']
        deploytool: ['operator']
        cabledriver: ['libreswan']
        k8s_version: ['1.20']
    steps:
      - name: Check out the Shipyard repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build the latest Shipyard image
        run: make images

      - name: Check out the ${{ matrix.project }} repository
        uses: actions/checkout@v2
        with:
          repository: submariner-io/${{ matrix.project }}
          path: ${{ matrix.project }}

      - name: Copy Shipyard resources
        run: cp -n Dockerfile.* Makefile.dapper ${{ matrix.project }}/

      - name: Make sure ${{ matrix.project }} is using the built Shipyard image
        run: sed -i 's/shipyard-dapper-base:*.*/shipyard-dapper-base:dev/' ${{ matrix.project }}/Dockerfile.dapper

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
          #with:
            #limit-access-to-actor: true

      - name: Run E2E deployment and tests
        uses: ./gh-actions/e2e
        with:
          k8s_version: ${{ matrix.k8s_version }}
          using: ${{ matrix.cabledriver }} ${{ matrix.deploytool }} ovn
          working-directory: ./${{ matrix.project }}

      - name: Post mortem
        if: failure()
        uses: ./gh-actions/post-mortem

  lint-consuming:
    name: Lint
    timeout-minutes: 15
    runs-on: ubuntu-latest
    if: |
      ( github.event.action == 'labeled' && github.event.label.name == 'lint-projects' )
      || ( github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'lint-projects') )
    strategy:
      fail-fast: false
      matrix:
        project: ['admiral', 'submariner', 'submariner-operator', 'lighthouse']
    steps:
      - name: Check out the Shipyard repository
        uses: actions/checkout@v2

      - name: Build the latest Shipyard image
        run: make images

      - name: Check out the ${{ matrix.project }} repository
        uses: actions/checkout@v2
        with:
          repository: submariner-io/${{ matrix.project }}
          path: ${{ matrix.project }}

      - name: Copy Shipyard resources
        run: cp -n Dockerfile.* Makefile.dapper ${{ matrix.project }}/

      - name: Make sure ${{ matrix.project }} is using the built Shipyard image
        run: sed -i 's/shipyard-dapper-base:*.*/shipyard-dapper-base:dev/' ${{ matrix.project }}/Dockerfile.dapper

      - name: Run all linters
        run: make -C ${{ matrix.project }} lint

  unit-consuming:
    name: Unit Tests
    timeout-minutes: 15
    runs-on: ubuntu-latest
    if: |
      ( github.event.action == 'labeled' && github.event.label.name == 'unit-projects' )
      || ( github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'unit-projects') )
    strategy:
      fail-fast: false
      matrix:
        project: ['admiral', 'submariner', 'submariner-operator', 'lighthouse']
    steps:
      - name: Check out the Shipyard repository
        uses: actions/checkout@v2

      - name: Build the latest Shipyard image
        run: make images

      - name: Check out the ${{ matrix.project }} repository
        uses: actions/checkout@v2
        with:
          repository: submariner-io/${{ matrix.project }}
          path: ${{ matrix.project }}

      - name: Copy Shipyard resources
        run: cp -n Dockerfile.* Makefile.dapper ${{ matrix.project }}/

      - name: Make sure ${{ matrix.project }} is using the built Shipyard image
        run: sed -i 's/shipyard-dapper-base:*.*/shipyard-dapper-base:dev/' ${{ matrix.project }}/Dockerfile.dapper

      - name: Run all unit tests
        run: make -C ${{ matrix.project }} unit
